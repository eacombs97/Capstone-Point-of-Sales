import Foundation

class Customer {
    private let customerId: String
    private var firstName: String
    private var lastName: String
    private var email: String
    private var phone: String
    private var address: String
    private var password: String
    private var billingAddress: String?
    private var cardNumber: String?
    private var cardExpiryDate: String?
    private var cvv: String?
    private var paymentMethod: String?
    private var orderDate: Date?
    private var orderTotal: Double
    private var orderStatus: String?

    init(firstName: String, lastName: String, email: String, phone: String, address: String) {
        self.customerId = UUID().uuidString
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.phone = phone
        self.address = address
        self.orderTotal = 0.0
    }

    func getCustomerId() -> String {
        return customerId
    }

    func getFirstName() -> String {
        return firstName
    }

    func setFirstName(_ firstName: String) {
        self.firstName = firstName
    }

    func getLastName() -> String {
        return lastName
    }

    func setLastName(_ lastName: String) {
        self.lastName = lastName
    }

    func getEmail() -> String {
        return email
    }

    func setEmail(_ email: String) {
        self.email = email
    }

    func getPhone() -> String {
        return phone
    }

    func setPhone(_ phone: String) {
        self.phone = phone
    }

    func getAddress() -> String {
        return address
    }

    func setAddress(_ address: String) {
        self.address = address
    }

    func getPassword() -> String {
        return password
    }

    func setPassword(_ password: String) {
        self.password = password
    }

    func updateProfile(firstName: String, lastName: String, email: String, password: String, address: String) {
        // Validation logic
        if !isValidEmail(email) || !isValidPassword(password) {
            print("Invalid email and/or password format. Please provide valid information.")
            return
        }

        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.password = password
        self.address = address
        print("Customer profile updated successfully!")
    }

    private func isValidEmail(_ email: String) -> Bool {
        // Simple email validation format
        let emailRegex = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
        return NSPredicate(format: "SELF MATCHES %@", emailRegex).evaluate(with: email)
    }

    private func isValidPassword(_ password: String) -> Bool {
        // Password validation logic
        // Adjust as needed for your specific password requirements
        let passwordRegex = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$#!%*?&])[A-Za-z\\d$@$#!%*?&]{8,}"
        return NSPredicate(format: "SELF MATCHES %@", passwordRegex).evaluate(with: password)
    }

    func forgotPassword(newPassword: String) {
        if isValidPassword(newPassword) {
            print("Password changed successfully!")
            self.password = newPassword
        } else {
            print("Invalid password format. Please provide a strong password.")
        }
    }

    func getBillingAddress() -> String? {
        return billingAddress
    }

    func getCardNumber() -> String? {
        return cardNumber
    }

    func getCardExpiryDate() -> String? {
        return cardExpiryDate
    }

    func getCvv() -> String? {
        return cvv
    }

    func getPaymentMethod() -> String? {
        return paymentMethod
    }

    func getOrderDate() -> Date? {
        return orderDate
    }

    func getOrderTotal() -> Double {
        return orderTotal
    }

    func getOrderStatus() -> String? {
        return orderStatus
    }

    func setBillingAddress(_ billingAddress: String) {
        self.billingAddress = billingAddress
    }

    func setCardNumber(_ cardNumber: String) {
        self.cardNumber = cardNumber
    }

    func setCardExpiryDate(_ cardExpiryDate: String) {
        self.cardExpiryDate = cardExpiryDate
    }

    func setCvv(_ cvv: String) {
        self.cvv = cvv
    }

    func setPaymentMethod(_ paymentMethod: String) {
        self.paymentMethod = paymentMethod
    }

    func setOrderDate(_ orderDate: Date) {
        self.orderDate = orderDate
    }

    func setOrderTotal(_ orderTotal: Double) {
        self.orderTotal = orderTotal
    }

    func setOrderStatus(_ orderStatus: String) {
        self.orderStatus = orderStatus
    }

    func calculateTotalCost() -> Double {
        // TODO: Add logic to calculate total cost based on database
        return orderTotal
    }

    func validateCardDetails() -> Bool {
        // Validate card details
        guard let cardNumber = cardNumber,
              let cardExpiryDate = cardExpiryDate,
              let cvv = cvv else {
            return false
        }

        return isValidCardNumber(cardNumber) && isValidExpiryDate(cardExpiryDate) && isValidCVV(cvv)
    }

    private func isValidCardNumber(_ cardNumber: String) -> Bool {
        // Logic to validate card number
        let cardNumberRegex = "^(\\d{4}-){3}\\d{4}$"
        return NSPredicate(format: "SELF MATCHES %@", cardNumberRegex).evaluate(with: cardNumber)
    }

    private func isValidExpiryDate(_ expiryDate: String) -> Bool {
        // Logic to validate expiry date
        let expiryDateRegex = "^(0[1-9]|1[0-2])/[0-9]{2}$"
        return NSPredicate(format: "SELF MATCHES %@", expiryDateRegex).evaluate(with: expiryDate)
    }

    private func isValidCVV(_ cvv: String) -> Bool {
        // Logic to validate CVV
        let cvvRegex = "^[0-9]{3}$"
        return NSPredicate(format: "SELF MATCHES %@", cvvRegex).evaluate(with: cvv)
    }

    func updateOrderStatus(_ newStatus: String) {
        self.orderStatus = newStatus
    }

    func generateOrderConfirmation() -> String {
        return "Order has been confirmed" // Placeholder return value
    }

    func verifyPayment() -> String {
        guard let cardNumber = cardNumber,
              let cardExpiryDate = cardExpiryDate,
              let cvv = cvv else {
            return "Payment failed"
        }

        return validateCardDetails() ? "Payment successful" : "Payment failed"
    }

    func retrieveOrderDetails(for customer: Customer) -> String {
        guard let orderDate = orderDate,
              let orderStatus = orderStatus else {
            return "Order details not available"
        }

        return """
        Order details...
        Customer: \(customer.getFirstName()) \(customer.getLastName())
        Order date: \(orderDate)
        Order total: \(orderTotal)
        Order status: \(orderStatus)
        """
    }
}

